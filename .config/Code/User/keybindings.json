// Place your key bindings in this file to override the defaults
[
    {
        "key": "alt+left",
        "command": "workbench.action.navigateLeft"
    },
    {
        "key": "alt+right",
        "command": "workbench.action.navigateRight"
    },
    {
        "key": "alt+up",
        "command": "workbench.action.navigateUp"
    },
    {
        "key": "alt+down",
        "command": "workbench.action.navigateDown"
    },
    {
        "key": "alt+x",
        "command": "workbench.action.showCommands"
    },    
    {
        "key": "alt+w",
        "command": "magit.status"
    },
    // Open terminal
    {
        "key": "ctrl+shift+c",
        "command": "workbench.action.terminal.new"
    },
    {
        "key": "ctrl+shift+`",
        "command": "-workbench.action.terminal.new"
    },
    // Goto definition
    {
        "key": "ctrl+alt+d",
        "command": "editor.action.revealDefinition",
        "when": "editorHasDefinitionProvider && editorTextFocus && !isInEmbeddedEditor"
    },
    {
        "key": "f12",
        "command": "-editor.action.revealDefinition",
        "when": "editorHasDefinitionProvider && editorTextFocus && !isInEmbeddedEditor"
    },
    // Back from
    {
        "key": "shift+alt+left",
        "command": "workbench.action.navigateBack"
    },
    {
        "key": "ctrl+alt+-",
        "command": "-workbench.action.navigateBack"
    },
    {
        "key": "shift+alt+right",
        "command": "workbench.action.navigateForward"
    },
    // Goto last edit
    {
        "key": "ctrl+alt+l",
        "command": "workbench.action.navigateToLastEditLocation"
    },
    {
        "key": "ctrl+tab",
        "command": "-workbench.action.quickOpenNavigateNextInEditorPicker",
        "when": "inEditorsPicker && inQuickOpen"
    },
    {
        "key": "ctrl+x ctrl+b",
        "command": "workbench.action.quickOpenNavigateNextInFilePicker",
        "when": "inFilesPicker && inQuickOpen"
    },
    {
        "key": "ctrl+p",
        "command": "-workbench.action.quickOpenNavigateNextInFilePicker",
        "when": "inFilesPicker && inQuickOpen"
    },
    // In-file navigation
    {
        "key": "ctrl+right",
        "command": "cursorWordRight",
        "when": "textInputFocus"
    },
    {
        "key": "ctrl+left",
        "command": "cursorWordLeft",
        "when": "textInputFocus"
    },
    //------
    // Calva
    {
        "key": "ctrl+e",
        "command": "calva.evaluateSelection",
        "when": "calva:connected && calva:keybindingsEnabled && editorTextFocus && !suggestWidgetVisible && editorLangId == 'clojure' && !editorHasSelection"
    },
    //------------------------
    // Calva: Paredit redefine
    {
        "key": "ctrl+right",
        "command": "cursorWordRight", // cursorWordAccessibilityRight
        "when": "calva:cursorAfterComment && editorLangId == 'clojure' || calva:keybindingsEnabled && config.calva.paredit.hijackVSCodeDefaults && editorTextFocus && !calva:cursorInComment && editorLangId == 'clojure' && paredit:keyMap =~ /original|strict/"
    }, 
    {
        "key": "ctrl+alt+right",
        "command": "paredit.forwardSexp",
        "when": "calva:keybindingsEnabled && editorTextFocus && editorLangId == 'clojure' && paredit:keyMap =~ /original|strict/"
    },
    {
        "key": "ctrl+left",
        "command": "cursorWordLeft", // cursorWordAccessibilityLeft
        "when": "calva:cursorAfterComment && editorLangId == 'clojure' || calva:keybindingsEnabled && config.calva.paredit.hijackVSCodeDefaults && editorTextFocus && !calva:cursorInComment && editorLangId == 'clojure' && paredit:keyMap =~ /original|strict/"
    },
    {
        "key": "ctrl+alt+left",
        "command": "paredit.backwardSexp",
        "when": "calva:keybindingsEnabled && editorTextFocus && editorLangId == 'clojure' && paredit:keyMap =~ /original|strict/"
    },
    {
        "key": "shift+ctrl+alt+right",
        "command": "paredit.selectForwardSexp",
        "when": "calva:keybindingsEnabled && editorTextFocus && editorLangId == 'clojure' && paredit:keyMap =~ /original|strict/"
    },
    {
        "key": "shift+ctrl+alt+left",
        "command": "paredit.selectBackwardSexp",
        "when": "calva:keybindingsEnabled && editorTextFocus && editorLangId == 'clojure' && paredit:keyMap =~ /original|strict/"
    },    
    {
        "key": "ctrl+home",
        "command": "cursorTop",
        "when": "calva:keybindingsEnabled && editorTextFocus && editorLangId == 'clojure' && paredit:keyMap =~ /original|strict/"
    },
    {
        "key": "ctrl+end",
        "command": "cursorBottom",
        "when": "calva:keybindingsEnabled && editorTextFocus && editorLangId == 'clojure' && paredit:keyMap =~ /original|strict/"
    },
    {
        "key": "ctrl+shift+home",
        "command": "cursorTopSelect",
        "when": "calva:keybindingsEnabled && editorTextFocus && editorLangId == 'clojure' && paredit:keyMap =~ /original|strict/"
    },
    {
        "key": "ctrl+shift+end",
        "command": "cursorBottomSelect",
        "when": "calva:keybindingsEnabled && editorTextFocus && editorLangId == 'clojure' && paredit:keyMap =~ /original|strict/"
    },
    {
        "key": "ctrl+down",
        "command": "scrollLineDown",
        "when": "calva:keybindingsEnabled && editorTextFocus && editorLangId == 'clojure' && paredit:keyMap =~ /original|strict/"
    },
    {
        "key": "alt+down",
        "command": "paredit.forwardDownSexp",
        "when": "calva:keybindingsEnabled && editorTextFocus && editorLangId == 'clojure' && paredit:keyMap =~ /original|strict/"
    },
    {
        "key": "ctrl+up",
        "command": "scrollLineUp",        
        "when": "calva:keybindingsEnabled && editorTextFocus && editorLangId == 'clojure' && paredit:keyMap =~ /original|strict/"
    },
    {
        "key": "alt+up",
        "command": "paredit.backwardUpSexp",
        "when": "calva:keybindingsEnabled && editorTextFocus && editorLangId == 'clojure' && paredit:keyMap =~ /original|strict/"
    },
    // advanced-navigation keybindings
    {
        "key": "ctrl+e",
        "command": "advanced-navigation.exchangePointAndMark",
        "when": "editorTextFocus && editorHasSelection"
    },
    {
        "key": "ctrl+alt+right",
        "command": "advanced-navigation.forwardSexp",
        "when": "editorTextFocus && editorLangId != 'clojure'"
    },
    {
        "key": "ctrl+alt+left",
        "command": "advanced-navigation.backwardSexp",
        "when": "editorTextFocus && editorLangId != 'clojure'"
    },
    {
        "key": "shift+ctrl+alt+right",
        "command": "advanced-navigation.forwardSexpSelect",
        "when": "editorTextFocus && editorLangId != 'clojure'"
    },
    {
        "key": "shift+ctrl+alt+left",
        "command": "advanced-navigation.backwardSexpSelect",
        "when": "editorTextFocus && editorLangId != 'clojure'"
    },
    {
        "key": "ctrl+u",
        "command": "advanced-navigation.swapTabGroups"
    },
    {
        "key": "ctrl+delete",
        "command": "advanced-navigation.justOneSpace",
        "when": "editorTextFocus && editorLangId != 'clojure'"
    },
    {
        "key": "alt+a",
        "command": "extension.aceJump"
    },
    // Copy current file path
    {
        "key": "ctrl+shift+c",
        "command": "copyFilePath",
    },
    {
        "key": "ctrl+alt+c",
        "command": "-copyFilePath",
    },
    {
        "key": "f1",
        "command": "workbench.action.quickOpen",
    },
    {
        "key": "f2",
        "command": "workbench.action.gotoSymbol",
    },    
    // New terminal:
    {
        "key": "ctrl+alt+c",
        "command": "workbench.action.terminal.toggleTerminal",
    },
    {
        "key": "ctrl+j",
        "command": "workbench.action.joinAllGroups"
    },
    {
        "key": "f3",
        "command": "highlightwords.addHighlight"
    },
    {
        "key": "ctrl+f3",
        "command": "highlightwords.removeAllHighlights"
    },
    {
        "key": "alt+e",
        "command": "code-runner.run"
    },
    {
        "key": "ctrl+shift+d",
        "command": "editor.action.copyLinesDownAction",
        "when": "editorTextFocus"
    },
    // ctrl+d  --  select the next occurrence    
    {
        "key": "ctrl+alt+down",
        "command": "findWordAtCursor.next"
    },
    {
        "key": "ctrl+alt+up",
        "command": "findWordAtCursor.previous"
    },
    {
        "key": "ctrl+k",
        "command": "deleteAllRight"
    },
    {
        "key": "ctrl+q",
        "command": "workbench.action.togglePanel"
    },
    {
        "key": "ctrl+j",
        "command": "-workbench.action.togglePanel"
    },
    {
        "key": "ctrl+shift+alt+b",
        "command": "latex-workshop.build",
        "when": "!config.latex-workshop.bind.altKeymap.enabled && editorLangId =~ /latex|rsweave|jlweave/"
    },
    {
        "key": "ctrl+alt+b",
        "command": "-latex-workshop.build",
        "when": "!config.latex-workshop.bind.altKeymap.enabled && editorLangId =~ /latex|rsweave|jlweave/"
    },
    // Upper/lower case
    {
        "key": "ctrl+cmd+up",
        "command": "editor.action.transformToUppercase",
        "when": "editorTextFocus"
    },
    {
        "key": "ctrl+cmd+down",
        "command": "editor.action.transformToLowercase",
        "when": "editorTextFocus"
    },
    {
        "key": "ctrl+]",
        "command": "workbench.action.splitEditorDown"
    },
    {
        "key": "ctrl+f4",
        "command": "java.test.runFromJavaProjectExplorer"
    },
    {
        "key": "ctrl+up",
        "command": "calva.showPreviousReplHistoryEntry",
        "when": "calva:connected && calva:keybindingsEnabled && calva:outputWindowActive && calva:replHistoryCommandsActive && editorLangId == 'clojure'"
    },
    {
        "key": "alt+up",
        "command": "-calva.showPreviousReplHistoryEntry",
        "when": "calva:connected && calva:keybindingsEnabled && calva:outputWindowActive && calva:replHistoryCommandsActive && editorLangId == 'clojure'"
    },
    {
        "key": "ctrl+down",
        "command": "calva.showNextReplHistoryEntry",
        "when": "calva:connected && calva:keybindingsEnabled && calva:outputWindowActive && calva:replHistoryCommandsActive && editorLangId == 'clojure'"
    },
    {
        "key": "alt+down",
        "command": "-calva.showNextReplHistoryEntry",
        "when": "calva:connected && calva:keybindingsEnabled && calva:outputWindowActive && calva:replHistoryCommandsActive && editorLangId == 'clojure'"
    },
    {
        "key": "ctrl+alt+up",
        "command": "org.incrementContext",
        "when": "editorLangId == 'org'"
    },
    {
        "key": "alt+right",
        "command": "-org.incrementContext",
        "when": "editorLangId == 'org'"
    },
    {
        "key": "ctrl+alt+down",
        "command": "org.decrementContext",
        "when": "editorLangId == 'org'"
    },
    {
        "key": "alt+left",
        "command": "-org.decrementContext",
        "when": "editorLangId == 'org'"
    },
    {
        "key": "ctrl+r",
        "command": "-workbench.action.reloadWindow",
        "when": "isDevelopment"
    }
]