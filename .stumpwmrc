(stumpwm:run-shell-command
 "feh --bg-scale ~/dotfiles/images/wallpapers/raining-green-background.jpg")

(setq *startup-message* "^5Lisp ^2^bsystem operational.")

;;;; change the prefix key to something else
(set-prefix-key (kbd "C-d"))

;;;; Default terminal emulator
(setq *terminal* "urxvt")

;;;; Default Browser
(setq *browser* "google-chrome")

;; ------------------------------------------------------------
;; Swank

(defun slime-package? (package-name)
  (equal (subseq package-name 0 5) "slime"))

(defun get-slime-package-path ()
  (let* ((elpa-path (namestring
                     (merge-pathnames ".emacs.d/elpa/"
                                      (user-homedir-pathname))))
         (pkg-version (car
                       (remove-if-not
                        #'slime-package?
                        (stumpwm:split-string
                         (stumpwm:run-shell-command
                          (concatenate 'string "ls " elpa-path) t)))))
         (slime-path (merge-pathnames pkg-version elpa-path)))
    (concatenate 'string (namestring slime-path) "/")))

(load (merge-pathnames "swank-loader.lisp" (get-slime-package-path)))

(swank-loader:init)

(defcommand swank-start () ()
 (swank:create-server :port 4005
                      :dont-close t)
 (echo-string
  (current-screen)
  "Starting swank. M-x slime-connect RET RET, then (in-package stumpwm)."))

(defcommand swank-stop () ()
  (swank:stop-server 4005)
  (echo-string
   (current-screen)
   "Stop swank."))
;;
;; ------------------------------------------------------------

;;; Lock screen
(defparameter *my-lock-command*
  "xscreensaver-command -lock")
(defcommand lock-screen () ()
  "Lock my screen."
  (run-shell-command *my-lock-command* t))
(run-shell-command "xscreensaver -no-splash")

(setq *proxy*
      (let ((proxy (stumpwm:run-shell-command "echo $http_proxy" t)))
        (if (> (length proxy) 1) (subseq proxy 7 (- (length proxy) 1))
            "")))

(setq google-chrome-shell-cmd
      (concatenate 'string
                   "google-chrome --proxy-server=" *proxy*))
(defcommand google-chrome () ()
  "run google-chrome"
  (let ((google-class (if (stumpwm::find-matching-windows
                           '(:class "Google-chrome")
                           'all-groups 'all-screens)
                          "Google-chrome"
                          "google-chrome")))
    (run-or-raise google-chrome-shell-cmd `(:class ,google-class))))

(defcommand midori () ()
  "run midor"
  (run-or-raise "midori" '(:class "Midori")))

(defcommand palemoon () ()
  "run palemoon"
  (run-or-raise "palemoon" '(:class "Pale moon")))

(setq chromium-shell-cmd
      (concatenate 'string
                   "chromium --proxy-server=" *proxy*))
(defcommand chromium () ()
  "run chromium"
  (let ((chromium-class "Chromium-browser"))
    (run-or-raise chromium-shell-cmd `(:class ,chromium-class))))

(defcommand firefox () ()
  "run firefox"
  (run-or-raise "firefox" '(:class "Firefox")))

(defcommand urxvt () ()
  "run urxvt"
  (run-or-raise "urxvt" '(:class "URxvt")))

(defcommand sunflower () ()
  "run sunflower"
  (run-or-raise "sunflower" '(:class "Sunflower")))

(defcommand mucommander () ()
  "run mucommander"
  (run-or-raise "mucommander" '(:class "com-mucommander-muCommander")))

(defcommand trader-workstation () ()
  "run TWS"
  (run-or-raise "~/Jts/tws" '(:class "com-install4j-runtime-launcher-UnixLauncher")))

(defcommand intellij-idea () ()
  "run IntelliJ IDEA"
  (run-or-raise "~/data/soft/idea-IC-172.4343.14/bin/idea.sh"
                '(:class "jetbrains-idea-ce")))

(defcommand android-studio () ()
  "run jetbrains android-studio"
  (run-or-raise "~/data/soft/android-studio/bin/studio.sh"
                '(:class "jetbrains-studio")))

(defcommand restart-swank-stop () ()
  (stumpwm:run-commands "swank-stop")
  (restart-hard))

(defmacro bind-shell-to-key (key command &optional (map *root-map*))
  `(define-key ,map (kbd ,key) (concatenate 'string
                                            "run-shell-command "
                                            ,command)))
(bind-shell-to-key "D" "deadbeef")
(bind-shell-to-key "C-M-z" "goldendict" *top-map*)
(bind-shell-to-key "T" "thunderbird")
(bind-shell-to-key "N" "gnome-nettool")
(bind-shell-to-key "C-t" "urxvt") ;; new shell
(bind-shell-to-key "C" "xfce4-settings-manager")
(bind-shell-to-key "M-m" "xfce4-mixer")
(bind-shell-to-key "C-s" "skypeforlinux") ;; apulse skype
(bind-shell-to-key "Q" "wine C:\\\\QUIK_OpenBroker\\\\info.exe")
(bind-shell-to-key "l" "xscreensaver-command -lock; systemctl suspend")

(define-key *root-map* (kbd "t") "urxvt")
(define-key *root-map* (kbd "M") "mucommander")
(define-key *root-map* (kbd "I") "trader-workstation")
(define-key *root-map* (kbd "G") "google-chrome")
(define-key *root-map* (kbd "e") "palemoon")
(define-key *root-map* (kbd "F") "firefox")
(define-key *root-map* (kbd "k") "prev")

(define-key *top-map* (kbd "C-M-l") "lock-screen")
(define-key *top-map* (kbd "C-M-e") "emacs")
;; (define-key *top-map* (kbd "C-M-e") "~/data/Projects/external/remacs/src/remacs")

(define-key *root-map* (kbd "w") "intellij-idea")
(define-key *top-map* (kbd "C-M-w") "intellij-idea")
(define-key *root-map* (kbd "a") "android-studio")

(define-key *top-map* (kbd "M-Tab") "windowlist")
(define-key *top-map* (kbd "M-Z") "pull-hidden-next")
(define-key *top-map* (kbd "C-M-Z") "pull-hidden-previous")
(define-key *top-map* (kbd "M-z") "pull-hidden-other")

(define-key *top-map* (kbd "s-Up") "move-focus up")
(define-key *top-map* (kbd "s-Down") "move-focus down")
(define-key *top-map* (kbd "s-Left") "move-focus left")
(define-key *top-map* (kbd "s-Right") "move-focus right")

(define-key *top-map* (kbd "s-M-Up") "pull-hidden-next")
(define-key *top-map* (kbd "s-M-Down") "pull-hidden-previous")
(define-key *top-map* (kbd "s-M-Left") "prev")
(define-key *top-map* (kbd "s-M-Right") "next")
(define-key *top-map* (kbd "s-SunPageUp") "pull-hidden-next")
(define-key *top-map* (kbd "s-SunPageDown") "pull-hidden-previous")

(define-key *top-map* (kbd "C-s-Up") "move-window up")
(define-key *top-map* (kbd "C-s-Down") "move-window down")
(define-key *top-map* (kbd "C-s-Left") "move-window left")
(define-key *top-map* (kbd "C-s-Right") "move-window right")

(define-key *root-map* (kbd "1") "only")
(define-key *root-map* (kbd "2") "vsplit")
(define-key *root-map* (kbd "3") "hsplit")
;; (kbd "C-d r") - interactive resize

(define-key *top-map* (kbd "M-F4") "delete")
(bind-shell-to-key "C-F8" "udiskie --tray" *top-map*)

(define-key *top-map* (kbd "C-F9") "swank-start")
(define-key *top-map* (kbd "C-F10") "swank-stop")
(define-key *top-map* (kbd "C-F11") "restart-swank-stop")
(define-key *top-map* (kbd "C-F12") "loadrc")

(define-key *top-map* (kbd "s-M-SunPageUp") "gnext")
(define-key *top-map* (kbd "s-M-SunPageDown") "gprev")
(define-key *top-map* (kbd "C-s-M-SunPageUp") "gnext-with-window")
(define-key *top-map* (kbd "C-s-M-SunPageDown") "gprev-with-window")
(define-key *top-map* (kbd "C-M-Tab") "grouplist")

(define-key *top-map* (kbd "SunPrint_Screen") "screenshot")
(define-key *top-map* (kbd "C-SunPrint_Screen") "fclear")
(define-key *top-map* (kbd "s-z") "fclear")

;; ------------------------------------------------------------
;; Fonts

(ql:quickload :clx-truetype)
(load-module "ttf-fonts")

;; Handy font functions:
;; (clx-truetype:cache-fonts)
;; (clx-truetype:get-font-families)
;; (clx-truetype:get-font-subfamilies "Fira Mono Medium")

(defun set-fira-mono-font ()
  (setq clx-truetype::*font-dirs*
        (append (list (namestring
                       (merge-pathnames ".local/share/fonts/" (user-homedir-pathname))))
                clx-truetype::*font-dirs*))
  (clx-truetype:cache-fonts)
  (set-font
   (make-instance 'xft:font
                  :family "Fira Mono Medium"
                  :subfamily "Regular"
                  :size 12.3)))

;; (set-font "-*-terminus-*-*-*-*-18-*-*-*-*-*-iso10646-*")
(set-fira-mono-font)

;; ------------------------------------------------------------
;; Message window

;;;; Message window gravity
;; ; :top-left :top-right :bottom-left :bottom-right :center
(setq *message-window-gravity* :center)

;;;; Input window gravity
;; ; :top-left :top-right :bottom-left :bottom-right :center
(setq *input-window-gravity* :center)

(set-bg-color "#F0FFF0")
(set-fg-color "#326B6B")

(set-win-bg-color "#DCDAD5")

;; Set the border color for the message bar and input bar.
(set-border-color "#555555")

;; ------------------------------------------------------------
;; Windows list

(setf *window-format* "%n%s %c (%t)")

;; ------------------------------------------------------------
;; Windows

;;;; Style of window borders
(setf *mouse-focus-policy* :click
      *window-border-style* :thin)

;; Set the border color for focused windows. This is only used when there is
;; more than one frame.
(set-focus-color "#555555")
(set-unfocus-color "#999999")

;; ------------------------------------------------------------
;; modeline
(setf *mode-line-timeout* 60)

(setf *mode-line-position* :bottom)

(setf *mode-line-background-color* "#DCDAD5")
(setf *mode-line-foreground-color* "#222222")
(setf *mode-line-border-width* 1)
(setf *mode-line-border-color* "#DCDAD5")

(load-module "cpu")
(load-module "mem")
(ql:quickload :xembed)
(ql:quickload :zpng)
(load-module "screenshot")

(setf stumpwm:*screen-mode-line-format*
      (list
       "%n   (%c%M)"
       "^>" '(:eval (stumpwm:run-shell-command
                     "LANG=en_US.utf8 date +%A' '%d.%m.%Y' '%l:%M' '%p' 'GMT''%:::z'           '" t))))

(stumpwm:enable-mode-line (stumpwm:current-screen)
                          (stumpwm:current-head)
                          t)

(load-module "stumptray")
(stumpwm:run-commands "stumptray")
(stumpwm:run-shell-command "nm-applet")
(stumpwm:run-shell-command "conky")
(stumpwm:run-shell-command "xxkb")

(defmacro with-rat-position (&rest body)
  `(multiple-value-bind (x y)
       (xlib:pointer-position (window-xwin (current-window)))
     ,@body
     (ratwarp x y)))

(defun commandp (command-name)
  (loop
    :for command :being :the :hash-keys :of stumpwm::*command-hash*
    :when (string= (symbol-name command-name)
                   (symbol-name command ))
      :return command))

;; (load-module "app-menu")

(setq *app-menu*
      '(("INTERNET"
         ("Chrome" google-chrome)
         ("Firefox" firefox)
         ("Skype" "skype"))
        ("VIRTUAL"
         ("Virtualbox" "virtualbox"))
        ("IDE"
         "Emacs" "emacs"
         "Intellij Idea" "intellij-idea"
         "Android Studio" "android-studio")
        ("WORK"
         ;;submenu
         ("OpenOffice.org"  "openoffice"))
        ("GRAPHICS"
         ;;submenu
         ("Gimp" "gimp")
         ("Pinta" "pinta")
         ("Inkscape" "inkscape"))
        ("urxvt" urxvt)
        ("K3B" "k3b")))

(defcommand show-menu () ()
  "Show the application menu"
  (labels
      ((pick (options)
         (let ((selection
                 (select-from-menu
                  (current-screen) ; screen
                  options          ; table
                  nil              ; prompt
                  0                ; initial-selection
                  )))
           (cond
             ((null selection)
              nil)
             ((stringp (second selection))
              (run-shell-command (second selection)))
             ((and (symbolp (second selection))
                  (commandp (second selection)))
              (funcall (second selection)))
             (t
              (if (equalp ".." (first selection))
                  (pick (second selection))
                  (pick (append (list (list ".." options))
                                (cdr selection)))))))))
    (pick *app-menu*)))

(define-key *top-map* (kbd "M-`") "show-menu")
